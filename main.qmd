---
jupyter: python3
---

```{python}
from riotwatcher import LolWatcher
import pandas as pd
from collections import defaultdict
```

```{python}
# create a file called key.txt with your api key
with open('key.txt', 'r') as file:
    api_key = file.readline()

# watcher = LolWatcher(api_key)
watcher = LolWatcher("RGAPI-9500dbcf-8a34-496d-956d-94a28bec2851")
my_region = 'na1'

# summoner = watcher.summoner.by_name(my_region, 'Among Us Jimin')
player_name = "Among Us Jimin"
summoner = watcher.summoner.by_name(my_region, player_name)
```

```{python}
puuid_in = summoner['puuid']
print(puuid_in)
```

```{python}
match_list = watcher.match.matchlist_by_puuid(
    region = my_region,
    puuid = puuid_in,
    count = 10,
    # queue = 420,
    # type = 'ranked',
    start_time = 1647211449,
    end_time = 1679029395,
)

print(len(match_list))
print(match_list)
```

```{python}
# test to make list of stats for past x games for Duckymomoepic
player_stats = defaultdict(list)
player_challenges = defaultdict(list)
tracked_stats = ["deaths", "kills", "championName", "totalMinionsKilled", "visionScore"]

num_deaths = []
num_kills = []
champs_played = []                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
cs = []
ward_score = []

for match in match_list:
    current_match = watcher.match.by_id(
    region=my_region,
    match_id=match
    )
    players = current_match["info"]["participants"]
    for player in players:
        if player["summonerName"] == player_name:
            for stat in player:
                if stat != "challenges":
                    player_stats[stat].append(player[stat])
            for challenge in player["challenges"]:
                player_challenges[challenge].append(player["challenges"][challenge])

keys_to_remove = []

for challenge in player_challenges:
    if len(player_challenges[challenge]) < len(player_challenges["abilityUses"]):
        keys_to_remove.append(challenge)

for key in keys_to_remove:
    player_challenges.pop(key)
            # num_deaths.append(player["deaths"])
            # num_kills.append(player["kills"])
            # champs_played.append(player["championName"])
            # cs.append(player["totalMinionsKilled"])
            # ward_score.append(player["visionScore"])
            
# print(f"Deaths: {num_deaths}")
# print(f"Kills: {num_kills}")
# print(f"Champs: {champs_played}")
# print(f"Cs: {cs}")
# print(f"Vision score: {ward_score}")
player_stats_df = pd.DataFrame(player_stats)
player_challenges_df = pd.DataFrame(player_challenges)
info = pd.concat([player_stats_df, player_challenges_df], axis=1)
info.to_csv('info.csv')

#btw theres a value for early surrender (gameEndedInEarlySurrender) in match --> info --> participants, remember to filter for remakes
```


